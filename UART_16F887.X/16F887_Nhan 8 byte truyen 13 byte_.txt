
// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_CLKOUT// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = ON        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = ON       // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ  4000000
#define index_frame_6byte 6
#define index_frame_11byte  11
#define index_frame_5byte  5
#define index_crc   2
#define index_convert 2
#define index_data 8
#define index_dataread 8
/**/
#define _8byte_number_reg 8
#define _2byte_number_reg 2

#define _XTAL_FREQ  4000000
#define index_frame_6byte 6
#define index_frame_11byte  11
#define index_frame_5byte  5
#define index_crc   2
#define index_convert 2
#define index_data 8
#define index_dataread 8
/**/
#define _8byte_number_reg 8
#define _2byte_number_reg 2

#include <xc.h>  
#include <stdio.h>
#include "uarthex.h"                                                                                     
#include "crcLIBhex.h"
#include "reflect_byte.h"


//unsigned char data_response[] = {0x06, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char data_response_13byte[] = {0x06, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char data_response_7byte[] = {0x06, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
unsigned char data_response_8byte[] = {0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/******************************/


void CONVERT_Data_6Byte(char *input, unsigned char *output_ref) {
    /*******Reflect Frame******/
    unsigned char input_ref[index_frame_6byte] = "";
    unsigned char txt[index_frame_6byte] = "";
    unsigned int crc;
    unsigned char output[index_crc] = "";
    reflect_byte(input, input_ref, index_frame_6byte);
    // UART_Write_Text(input_ref);
    /*****Tinh CRC*****/

    for (unsigned int i = 0; i < index_frame_6byte; i++) {
        txt[i] = input_ref[index_frame_6byte - 1 - i];
    }

    crc = crc16(txt, index_frame_6byte);
    output[0] = crc & 0xff;
    output[1] = (crc >> 8)&0xff;
    //UART_Write_Text(output);

    /**********Reflect CRC**********/
    reflect_byte(output, output_ref, index_crc);
    //UART_Write_Text(output_ref);

}

void __interrupt() ISR() {
    unsigned char crc_code_read[index_convert] = "";
    unsigned char crc_code_response[index_convert] = "";
    unsigned char data[13] = "";
    unsigned char i = 0;
    unsigned int address;

    if (PIR1bits.RCIF) {
        if (UART_Data_Ready) {
            UART_Read_Text(data, 8);
            for (i = 0; i < 5; i++)
                data[i + 8] = 0x47;
            data[13] = '\0';
            //CONVERT_Data_6Byte(data, crc_code_read);
            if (UART_TX_Empty()) {
                UART_Write_Text_Length(data, 13);
            }
        }

    }
}

inline static void config_interrupt() {

    INTCON = 0xC0;
    PIE1bits.RCIE = 1;

}

void main() {
    UART_Init(9600);
    config_interrupt();
    while (1);
}
